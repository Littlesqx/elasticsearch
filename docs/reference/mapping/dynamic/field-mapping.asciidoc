[[dynamic-field-mapping]]
=== 动态字段映射

默认情况下，当在文档中找到以前看不见的字段时，Elasticsearch 将向类型映射中添加新字段。
在文档和 <<object,`object`>> 层面都可以通过将 <<dynamic,`dynamic`>> 参数设置为 `false` （忽略新字段）或 `strict` （遇到未知字段抛出异常）来禁用该行为。

假设启用了 `dynamic` 字段映射，那么一些简单的规则将被用于确定该字段应该具有的数据类型：

[horizontal]
*JSON 数据类型*::                   *Elasticsearch 数据类型*

`null`::                            没有字段被添加。
`true` or `false`::                 <<boolean,`boolean`>> 字段。
floating{nbsp}point{nbsp}number::   <<number,`float`>> 字段。
integer::                           <<number,`long`>> 字段。
object::                            <<object,`object`>> 字段
array::                             取决于数组中的第一个非空值。
string::                            <<date,`date`>> 字段（如果该值通过 <<date-detection,日期检测>>）、
                                    <<number,`double`>> 或 <<number,`long`>> 字段（如果该值通过<<numeric-detection,数值检测>>）、
                                    或者 <<text,`text`>> 字段，并带有 <<keyword,`keyword`>> 子字段。

仅 <<mapping-types,字段类型>> 会被动态检测。全部其他数据类型必须被显式映射。

除了下面列举的选项外，还可以使用 <<dynamic-templates,`dynamic_templates`>> 进一步定制动态字段映射规则。

[[date-detection]]
==== 日期检测


如果启用了日期检测（默认），则会检查新的字符串字段，以确定起内容是否与 `dynamic_date_formats` 中指定的任何日期模式相匹配。

`dynamic_date_formats` 的默认值是：

&#91; <<strict-date-time,`"strict_date_optional_time"`>>,`"yyyy/MM/dd HH:mm:ss Z||yyyy/MM/dd Z"`]

例如：

[source,js]
--------------------------------------------------
PUT my_index/_doc/1
{
  "create_date": "2015/09/02"
}

GET my_index/_mapping <1>
--------------------------------------------------
// CONSOLE
<1> The `create_date` field has been added as a <<date,`date`>>
    field with the <<mapping-date-format,`format`>>: +
    `"yyyy/MM/dd HH:mm:ss Z||yyyy/MM/dd Z"`.
<1> `create_date` 字段会被以带有 <<mapping-date-format,`format`>> 的 <<date,`date`>> 字段自动添加： `"yyyy/MM/dd HH:mm:ss Z||yyyy/MM/dd Z"` 。

===== 禁用日期检测

动态日期检测可以通过设置 `date_detection` 为 `false` 禁用。

[source,js]
--------------------------------------------------
PUT my_index
{
  "mappings": {
    "_doc": {
      "date_detection": false
    }
  }
}

PUT my_index/_doc/1 <1>
{
  "create": "2015/09/02"
}
--------------------------------------------------
// CONSOLE

<1> `create_date` 字段会以 <<text,`text`>> 字段添加。

===== 自定义检测日期格式

或者，可以自定义 `dynamic_date_formats` 以支持你自己的<<mapping-date-format,日期格式>>：

[source,js]
--------------------------------------------------
PUT my_index
{
  "mappings": {
    "_doc": {
      "dynamic_date_formats": ["MM/dd/yyyy"]
    }
  }
}

PUT my_index/_doc/1
{
  "create_date": "09/25/2015"
}
--------------------------------------------------
// CONSOLE


[[numeric-detection]]
==== 数值检测

虽然 JSON 支持本机浮点和整数数据类型，但某些应用程序或语言有时可能将数字呈现为字符串。
通常，正确的解决方案是显式映射这些字段，但可以启用数字检测（默认情况下禁用）以自动执行此操作：


[source,js]
--------------------------------------------------
PUT my_index
{
  "mappings": {
    "_doc": {
      "numeric_detection": true
    }
  }
}

PUT my_index/_doc/1
{
  "my_float":   "1.0", <1>
  "my_integer": "1" <2>
}
--------------------------------------------------
// CONSOLE
<1> `my_float` 字段会以 <<number,`float`>> 字段添加。
<2> `my_integer` 字段会以 <<number,`long`>> 字段添加。

