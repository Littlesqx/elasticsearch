[[mapping-routing-field]]
=== `_routing` 字段

使用以下公式将文档路由到索引中的特定分片：

    shard_num = hash(_routing) % num_primary_shards

用于 `_routing` 的默认值是文档的 <<mapping-id-field,`_id`>> 。

可以通过为每个文档指定自定义 `routing` 值来实现自定义路由模式。例如：

[source,js]
------------------------------
PUT my_index/_doc/1?routing=user1&refresh=true <1>
{
  "title": "This is a document"
}

GET my_index/_doc/1?routing=user1 <2>
------------------------------
// CONSOLE
// TESTSETUP

<1> 本文档使用 `user1` 作为其路由值，而不是其 ID。
<2> 当 <<docs-get,获取>>、<<docs-delete,删除>>或<<docs-update,更新>>文档时，需要提供相同的 `routing` 值。    

可以在查询中访问 `_routing` 字段的值：

[source,js]
--------------------------
GET my_index/_search
{
  "query": {
    "terms": {
      "_routing": [ "user1" ] <1>
    }
  }
}
--------------------------
// CONSOLE

<1> 查询 `_routing` 字段（另见 <<query-dsl-ids-query,`ids` 查询>>）

==== Searching with custom routing

自定义路由可以减少搜索的影响。将搜索请求发送到与特定路由值（或多个值）匹配的分片，而不是发散到索引中的所有分片：

[source,js]
------------------------------
GET my_index/_search?routing=user1,user2 <1>
{
  "query": {
    "match": {
      "title": "document"
    }
  }
}
------------------------------
// CONSOLE

<1> 此搜索请求仅在与 `user1` 和 `user2` 路由值关联的分片上执行。


==== 需要设置路由值

<<docs-delete,deleting>>, or <<docs-update,updating>> a document.

使用自定义路由时，每当<<docs-index_,索引>>、<<docs-get,获取>>、<<docs-delete,删除>>或<<docs-update,更新>>文档时提供路由值是很重要。

忘记路由值可能导致文档被索引到多个分片上。作为安全措施，可以将 `_routing` 字段配置为使所有 CRUD 操作都需要自定义 `routing` 值：

[source,js]
------------------------------
PUT my_index2
{
  "mappings": {
    "_doc": {
      "_routing": {
        "required": true <1>
      }
    }
  }
}

PUT my_index2/_doc/1 <2>
{
  "text": "No routing value provided"
}
------------------------------
// CONSOLE
// TEST[catch:bad_request]
<1> `_doc` 文档需要路由。
<2> 该索引请求抛出 `routing_missing_exception` 。

==== 具有自定义路由的唯一 IDs

索引指定自定义 `_routing` 的文档时，索引中所有分片都无法保证 `_id` 的唯一性。
实际上，如果使用不同的 `_routing` 值索引，具有相同 `_id` 的文档可能最终会出现在不同的分片上。

用户应确保 ID 在索引中是唯一的。

[[routing-index-partition]]
==== 路由到索引分区

可以配置索引，使得自定义路由值将转到分片的子集而不是单个分片。这有助于降低结束不平衡群集的风险，同时仍然可以减少搜索的影响。

这是通过在索引创建时提供索引级别设置 <<routing-partition-size,`index.routing_partition_size`>> 来完成的。
随着分区大小的增加，数据分布越均匀，代价是每个请求必须搜索更多分片。

当此设置存在时，计算分片的公式变为：

    shard_num = (hash(_routing) + hash(_id) % routing_partition_size) % num_primary_shards

也就是说， `_routing` 字段用于计算索引中的一组分片，然后 `_id` 用于选择该集合中的分片。

要启用此功能， `index.routing_partition_size` 的值应大于1且小于 `index.number_of_shards` 。

*   无法在其中创建具有 <<parent-join,`join` 字段>>关系的映射。
*   索引中的所有映射都必须将 `_routing` 字段标记为必需。