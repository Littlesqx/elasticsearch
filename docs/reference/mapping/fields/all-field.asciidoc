[[mapping-all-field]]
=== `_all` field

不推荐使用[6.0.0, `_all` may no longer be enabled for indices created in 6.0+, use a custom field and the mapping `copy_to` parameter]

对于在 6.0+ 中创建的索引，可能不再启用 `_all` ，使用自定义字段和映射 `copy_to` 参数

`_all` 字段是一个特殊的_catch-all_ 字段，它将所有其他字段的值连接成一个大字符串，使用空格作为分隔符，然后<<analysis,分析>>并编制索引，但不存储。这意味着可以搜索它，但不能检索它。

`_all` 字段允许你在不知道哪个字段包含值的情况下搜索文档中的值。 这使得它在开始使用新数据集时成为一个有用的选项。例如：

[source,js]
--------------------------------
PUT /my_index
{
  "mapping": {
    "user": {
      "_all": {
        "enabled": true   <1>
      }
    }
  }
}

PUT /my_index/user/1      <2>
{
  "first_name":    "John",
  "last_name":     "Smith",
  "date_of_birth": "1970-10-24"
}

GET /my_index/_search
{
  "query": {
    "match": {
      "_all": "john smith 1970"
    }
  }
}
--------------------------------
// TEST[skip:_all is no longer allowed]
// CONSOLE
<1> 启用 `_all` 字段。
<2> `_all` 字段会包含这些词条：[ `"john"`, `"smith"`, `"1970"`, `"10"`, `"24"` ]

[NOTE]
.所有值都被视为字符串
=============================================================================

上例中的 `date_of_birth` 字段被识别为 `date` 字段，因此将索引表示 `1970-10-24 00:00:00 UTC` 的单个术语。
但是， `_ all` 字段将所有值视为字符串，因此日期值被索引为三个字符串术语：`"1970"` 、 `"24"` 、 `"10"`。

值得注意的是， `_ all` 字段将每个字段的原始值组合为一个字符串。它没有组合每个字段的 _terms_ 。

=============================================================================

`_all` 字段只是一个 <<text,`text`>> 字段，并接受其他字符串字段接受的相同参数，包括 `analyzer` 、 `term_vectors` 、 `index_options` 和 `store` 。

`_all` 字段可能很有用，尤其是在使用简单过滤探索新数据时。但是，通过将字段值连接成一个大字符串， `_all` 字段会丢失短字段（更相关）和长字段（不太相关）之间的区别。对于搜索相关性很重要的用例，最好具体查询各个字段。

`_all` 字段不是免费的：它需要额外的 CPU 周期并使用更多的磁盘空间。因此，默认情况下禁用它。如果需要，它可以<<enable-all-field,启用>>。

[[querying-all-field]]
==== 在查询中使用 `_all` 字段

如果启用， <<query-dsl-query-string-query,`query_string`>> 和 <<query-dsl-simple-query-string-query,`simple_query_string`>> 查询默认查询 `_all` 字段，除非指定了另一个字段：

[source,js]
--------------------------------
GET _search
{
  "query": {
    "query_string": {
      "query": "john smith new york"
    }
  }
}
--------------------------------
// CONSOLE

同样适用于 <<search-uri-request,URI搜索请求>>中的 `?q=`参数（在内部将其重写为 `query_string` 查询）：

[source,js]
--------------------------------
GET _search?q=john+smith+new+york
--------------------------------
// TEST[skip:_all is no longer allowed]
// CONSOLE

其它查询，例如 <<query-dsl-match-query,`match`>> 和 <<query-dsl-term-query,`term`>> 查询要求明确指定 `_all` 字段，如<<mapping-all-field,第一个例子>>。

[[enabling-all-field]]
==== 启用 `_all` 字段

通过将 `enabled` 设置为 `true` ，可以为每个类型启用 `_all` 字段：

[source,js]
--------------------------------
PUT my_index
{
  "mappings": {
    "type_1": { <1>
      "properties": {...}
    },
    "type_2": { <2>
      "_all": {
        "enabled": true
      },
      "properties": {...}
    }
  }
}
--------------------------------
// TEST[s/\.\.\.//]
// TEST[skip:_all is no longer allowed]
// CONSOLE

<1> `type_1` 中的 `_all` 字段被禁用。
<2> `type_2` 中的 `_all` 字段被启用。

如果启用了 `_all` 字段，则 URI 搜索请求和 `query_string` 和 `simple_query_string` 查询可以自动将其用于查询（请参阅 <<querying-all-field>>）。
你可以将它们配置为使用 `index.query.default_field` 设置的不同字段：

[source,js]
--------------------------------
PUT my_index
{
  "mappings": {
    "my_type": {
      "properties": {
        "content": {
          "type": "text"
        }
      }
    }
  },
  "settings": {
    "index.query.default_field": "content" <1>
  }
}
--------------------------------
// CONSOLE

<1> `query_string` 查询将默认查询此索引中的 `content` 字段。

[[all-field-and-boosting]]
==== 索引 boosting 和 `_all` 字段

单个字段可以在索引时通过使用 <<mapping-boost,`boost`>> 参数 _boosted_ 。`_all` 字段考虑了这些 boosts：

[source,js]
--------------------------------
PUT myindex
{
  "mappings": {
    "mytype": {
      "_all": {"enabled": true},
      "properties": {
        "title": { <1>
          "type": "text",
          "boost": 2
        },
        "content": { <1>
          "type": "text"
        }
      }
    }
  }
}
--------------------------------
// TEST[skip:_all is no longer allowed]
// CONSOLE

<1> 查询 `_all` 字段，源自 `title` 字段的单词的相关性是源自 `content` 字段的单词的两倍。

警告：使用带有 `_all` 字段的索引时间（index-time）的 boosting 会对查询性能产生重大影响。通常，更好的解决方案是单独查询字段，并提供可选的查询时间 boosting。


[[custom-all-fields]]
==== 自定义 `_all` 字段

While there is only a single `_all` field per index, the <<copy-to,`copy_to`>>
parameter allows the creation of multiple __custom `_all` fields__. For
instance, `first_name` and `last_name` fields can be combined together into
the `full_name` field:

虽然每个索引只有一个 `_all` 字段，但 <<copy-to,`copy_to`>> 参数允许创建多个 __custom `_all` 字段___ 。例如， `first_name` 和 `last_name` 字段可以组合成 `full_name` 字段：

[source,js]
--------------------------------
PUT myindex
{
  "mappings": {
    "mytype": {
      "properties": {
        "first_name": {
          "type":    "text",
          "copy_to": "full_name" <1>
        },
        "last_name": {
          "type":    "text",
          "copy_to": "full_name" <1>
        },
        "full_name": {
          "type":    "text"
        }
      }
    }
  }
}

PUT myindex/mytype/1
{
  "first_name": "John",
  "last_name": "Smith"
}

GET myindex/_search
{
  "query": {
    "match": {
      "full_name": "John Smith"
    }
  }
}
--------------------------------
// CONSOLE

<1> `first_name` 和 `last_name` 值被复制到 `full_name` 字段。

[[highlighting-all-field]]
==== 高亮和 `_all` 字段

如果原始字符串值可用，则字段只能用于 <<search-request-highlighting,highlighting>> ，可以是<<mapping-source-field,`_source`>> 字段，也可以是存储字段。

`_source` 字段中不存在 `_all` 字段，默认情况下不存储或启用它，因此无法突出显示。
有两种选择。<<all-field-store,存储 `_all` 字段>>或高亮显示<<all-highlight-fields,原始字段>>。

[[all-field-store]]
===== 存储 `_all` 字段

如果 `store` 设置为 `true` ，那么原始字段值是可检索的并且可以高亮显示：

[source,js]
--------------------------------
PUT myindex
{
  "mappings": {
    "mytype": {
      "_all": {
        "enabled": true,
        "store": true
      }
    }
  }
}

PUT myindex/mytype/1
{
  "first_name": "John",
  "last_name": "Smith"
}

GET _search
{
  "query": {
    "match": {
      "_all": "John Smith"
    }
  },
  "highlight": {
    "fields": {
      "_all": {}
    }
  }
}
--------------------------------
// TEST[skip:_all is no longer allowed]
// CONSOLE

当然，启用和存储 `_all` 字段将占用更多的磁盘空间，并且由于它是其他字段的组合，因此可能会导致奇怪的高亮显示结果。

`_all` 字段也接受 `term_vector` 和 `index_options` 参数，允许高亮显示使用它。

[[all-highlight-fields]]
===== 高亮显示原始字段

你可以查询 `_all` 字段，但使用原始字段突出显示如下：

[source,js]
--------------------------------
PUT myindex
{
  "mappings": {
    "mytype": {
      "_all": {"enabled": true}
    }
  }
}

PUT myindex/mytype/1
{
  "first_name": "John",
  "last_name": "Smith"
}

GET _search
{
  "query": {
    "match": {
      "_all": "John Smith" <1>
    }
  },
  "highlight": {
    "fields": {
      "*_name": { <2>
        "require_field_match": false  <3>
      }
    }
  }
}
--------------------------------
// TEST[skip:_all is no longer allowed]
// CONSOLE

<1> 该查询检查 `_all` 字段以查找匹配的文档。
<2> 高亮显示在两个名称字段上，可从 `_source` 获得。
<3> 查询未针对名称字段运行，因此将 `require_field_match` 设置为 `false` 。
