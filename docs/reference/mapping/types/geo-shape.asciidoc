[[geo-shape]]
=== Geo-Shape 数据类型

`geo_shape` 数据类型有助于使用任意地理形状（如矩形和多边形）进行索引和搜索。
当被索引的数据或正在执行的查询包含除了点之外的形状时，应该使用它。

你可以使用该类型和 <<query-dsl-geo-shape-query,geo_shape Query>> 查询文档。

[[geo-shape-mapping-options]]
[float]
==== 映射选项

geo_shape 映射可将 geo_json 几何对象映射到 geo_shape 类型中。要启用它，用户必须将字段显式映射到 geo_shape 类型。

[cols="<,<,<",options="header",]
|=======================================================================
|选项 |描述| 默认

|`tree` |使用前缀树（PrefixTree）实现的命名：Geohash 前缀树的 `geohash` 和 Quad 前缀树的 `quadtree` 。
| `geohash`

|`precision` |可以使用该参数代替 `tree_levels` 参数设置适当的值。该值指定所需的精度，而 Elasticsearch 将计算最佳 tree_levels 值以保证此精度。
该值应为数字，后跟可选的距离单位。合法的距离单位包括： `in` 、 `inch` 、 `yd` 、 `yard` 、 `mi` 、 `miles` 、 `km` 、 `kilometers` 、
`m` 、 `meters` 、 `cm` 、 `centimeters` 、 `mm` 、 `millimeters` 。
| `meters`

|`tree_levels` |前缀树（PrefixTree）使用的最大层数。这可用于控制形状表示的精度，从而控制索引的词元（term）。默认为所选前缀树（PrefixTree）实现的默认值。
由于此参数需要对底层实现有一定程度的理解，因此用户可以使用 `precision` 参数代替。但是，Elasticsearch 仅在内部使用 tree_levels 参数，因此即使你使用 precision 参数，也是通过映射 API 返回。
| `50m`

|`strategy` |strategy 参数定义了如何在索引和搜索时表示形状的方法。它还会影响可用功能，因此建议让 Elasticsearch 自动设置此参数。
有两种策略可供选择： `recursive` 和 `term` 。词项策略（Term strategy）仅支持点类型（ `points_only` 参数将自动设置为 true），而递归策略（Recursive strategy）支持所有形状类型。
（重要： 参考 <<prefix-trees, Prefix trees>> 以查阅更多信息）
| `recursive`

|`distance_error_pct` |用作前缀树（PrefixTree）的提示，说明它应该有多精确。默认是 0.025 (2.5%)，且支持的最大值是 0.5 。
性能说明：如果明确定义了 `precision` 或 `tree_level` ，该值默认为 0 。这会促使高分辨率形状的内存有效利用，并且误差较小（例如，大型图形中 1m 的内存，且小于 0.001 的错误率）。
为了改善索引性能（查询的实际花销），请明确定义 `precision` 或 `tree_level` 以及合理的 `distance_error_pct` ，并且注意大型形状会产生更大的误报。
| `0.025`

|`orientation` |定义如何解析多边形（polygons / multipolygons）的顶点顺序。此参数定义两个坐标系规则之一（右手或左手），每个规则可以用三种不同的方式指定。
一、右手规则：`right` 、 `ccw` 、 `counterclockwise` 。二、左手规则：`left` 、 `cw` 、 `clockwise` 。
默认方向（逆时针方向）符合 OGC 标准，该标准以逆时针顺序定义外环顶点，而内环（顶点）以顺时针顺序排列。
在 geo_shape 映射中设置此参数会显式设置 geo_shape 字段的坐标列表的顶点顺序，但可以在每个单独的 GeoJSON 或 WKT 文档中重写。
| `ccw`

|`points_only` |将此选项设置为 `true` （默认为 `false` ）仅为点形状配置 `geo_shape` 字段类型（注意：尚不支持多点）。
当知道只有点将被索引时，这将优化 `geohash` 和 `quadtree` 的索引和搜索性能。目前，geo_shape 查询无法在 `geo_point` 字段类型上执行。
此选项通过改善 `geo_shape` 字段上的点性能来弥补差距，以便 `geo_shape` 查询在仅有点的字段上是最佳的。
| `false`

|`ignore_malformed` |如果为 true，则忽略格式错误的 GeoJSON 或 WKT 形状。如果为 false （默认），格式错误的 GeoJSON 和 WKT 形状会抛出异常并拒绝整个文档。
| `false`

|`ignore_z_value` |
如果为 `true` （默认），将接受三个维度点（存储在源中），但只会索引纬度和经度值; 第三个维度被忽略。
如果为 `false` ，则包含任何超过纬度和经度（二维）值的地理点会抛出异常并拒绝整个文档。
| `true`


|=======================================================================

[[prefix-trees]]
[float]
==== 前缀树（Prefix tree）

为了有效地表示索引中的形状，使用实现前缀树（PrefixTree）将形状转换为表示网格方块（通常称为“栅格”）的一系列散列。
树概念来自于前缀树（PrefixTree）使用多个网格层，每个网格层都具有越来越高的精度来表示地球。

这可以被认为是在更高的缩放级别上增加地图或图像的细节水平。

提供了多个前缀树（PrefixTree）实现：

* GeohashPrefixTree  - 使用 http://en.wikipedia.org/wiki/Geohash[geohashes] 用于网格方块。
Geohashes 是纬度和经度交错位的 base32 编码字符串。因此哈希越长，它就越精确。
添加到 geohash 的每个字符代表另一个树级别，并为 geohash 添加 5 位精度。
geohash 表示矩形区域，并具有 32 个子矩形。Elasticsearch 中的最大级别数为 24。
* QuadPrefixTree - 使用 http://en.wikipedia.org/wiki/Quadtree[quadtree] 用于网格方块。
与 geohash 类似，四叉树交错纬度和经度的位，结果散列是一个位集。四叉树中的树级表示该位集中的 2 个位，每个坐标一个。
Elasticsearch 中四叉树的最大级别为 50。

[[spatial-strategy]]
[float]
===== 空间策略
PrefixTree 实现依赖于 SpatialStrategy 将所提供的 Shape 分解为近似网格方块。每种策略都回答以下问题：

* 可以索引哪种类型的形状？
* 可以使用哪些类型的查询操作和形状？
* 它是否支持每个字段多个形状？

提供以下策略实现（具有相应的功能）：

[cols="<,<,<,<",options="header",]
|=======================================================================
|策略 |支持的形状 |支持的查询 |多形状

|`recursive` |<<input-structure, 全部>> |`INTERSECTS` 、 `DISJOINT` 、 `WITHIN` 、 `CONTAINS` |Yes
|`term` |<<point, Points>> |`INTERSECTS` |Yes

|=======================================================================

[float]
===== 准确性

Geo_shape 不能提供 100％ 的准确性，并且根据它的配置方式，它可能会返回 `INTERSECTS` 、 `WITHIN` 和 `CONTAINS` 查询的一些误报，
以及` `DISJOINT` 查询的一些误报。为了缓解这种情况，必须为 tree_levels 参数选择合适的值并相应地调整预期。
例如，一个点可能在特定网格单元的边界附近，因此可能与仅与其旁边的单元匹配的查询不匹配 - 即使该形状非常接近该点。

[float]
===== 例子

[source,js]
--------------------------------------------------
PUT /example
{
    "mappings": {
        "doc": {
            "properties": {
                "location": {
                    "type": "geo_shape",
                    "tree": "quadtree",
                    "precision": "100m"
                }
            }
        }
    }
}
--------------------------------------------------
// CONSOLE
// TESTSETUP

此映射使用 quad_tree 实现将位置字段映射到 geo_shape 类型，精度为 100m 。 Elasticsearch 将其转换为 tree_levels 设置为 20 。

[float]
===== 性能考虑因素

Elasticsearch 使用前缀树中的路径作为索引和查询中的术语。级别越高（因此精度越高），生成的术语越多。
当然，计算条款，将它们保存在内存中，并将它们存储在磁盘上都需要付出代价。
特别是对于更高的树级别，即使数据量适中，索引也会变得非常大。此外，功能的大小也很重要。
大而复杂的多边形可以在更高的树级别占用大量空间。哪种设置是正确的取决于用例。通常，人们会根据索引大小和查询性能来衡量准确性。

Elasticsearch 中的两种实现的默认值是指数大小与赤道上 50m 的合理精度水平之间的折中。
这允许索引数千万个形状而不会相对于输入大小过度膨胀所得到的索引。

[[input-structure]]
[float]
==== 输入结构

可以使用 http://www.geojson.org[GeoJSON] 或 http://docs.opengeospatial.org/is/12-063r5/12-063r5.html[Well-Known Text]（WKT）格式来表示形状。
下表提供了 GeoJSON 和 WKT 到 Elasticsearch 类型的映射：

[cols="<,<,<,<",options="header",]
|=======================================================================
|GeoJSON 类型 |WKT 类型 |Elasticsearch 类型 |描述

|`Point` |`POINT` |`point` |单个地理坐标。注意：Elasticsearch 仅使用 WGS-84 坐标。
|`LineString` |`LINESTRING` |`linestring` |给出两个或多个点之间的任意一条线。
|`Polygon` |`POLYGON` |`polygon` |一个__闭合__的多边形，其第一个和最后一个点必须匹配，因此需要 `n + 1` 个顶点来创建一个 `n` 边形，最少 `4` 顶点。
|`MultiPoint` |`MULTIPOINT` |`multipoint` |一系列未连接但可能相关的点。
|`MultiLineString` |`MULTILINESTRING` |`multilinestring` |一系列独立的线串。
|`MultiPolygon` |`MULTIPOLYGON` |`multipolygon` |一系列单独的多边形。
|`GeometryCollection` |`GEOMETRYCOLLECTION` |`geometrycollection` | GeoJSON 形状类似于 `multi *` 形状，除了多种类型可以共存（例如，Point 和 LineString）。
|`N/A` |`BBOX` |`envelope` |通过仅指定左上角和右下角指定的边界矩形或包络。
|`N/A` |`N/A` |`circle` |圆心由中心点和半径指定的单位，默认为 `METERS` 。

|=======================================================================

[NOTE]
=============================================

对于所有类型，内部 `type` 和 `coordinates` 字段都是需要。

在 GeoJSON 和 WKT 中，因此在 Elasticsearch 中，正确的 *坐标顺序是坐标数组内的经度，纬度（X，Y）* 。
这与通常使用口语纬度，经度（Y，X）的许多地理空间 API（例如，Google 地图）不同。

=============================================

[[point]]
[float]
===== http://geojson.org/geojson-spec.html#id2[Point]

点（Point）是单个地理坐标，例如建筑物的位置或智能手机的 Geolocation API 给出的当前位置。以下是 GeoJSON 中的一个示例。

[source,js]
--------------------------------------------------
POST /example/doc
{
    "location" : {
        "type" : "point",
        "coordinates" : [-77.03653, 38.897676]
    }
}
--------------------------------------------------
// CONSOLE

以下是 WKT 中的一个例子：

[source,js]
--------------------------------------------------
POST /example/doc
{
    "location" : "POINT (-77.03653 38.897676)"
}
--------------------------------------------------
// CONSOLE

[float]
===== http://geojson.org/geojson-spec.html#id3[LineString]

由两个或多个位置的数组定义的 `linestring` 。通过仅指定两个点， `linestring` 将表示一条直线。
指定两个以上的点会创建一个任意路径。以下是 GeoJSON 中 LineString 的示例。

[source,js]
--------------------------------------------------
POST /example/doc
{
    "location" : {
        "type" : "linestring",
        "coordinates" : [[-77.03653, 38.897676], [-77.009051, 38.889939]]
    }
}
--------------------------------------------------
// CONSOLE

以下是 WKT 中 LineString 的示例：

[source,js]
--------------------------------------------------
POST /example/doc
{
    "location" : "LINESTRING (-77.03653 38.897676, -77.009051 38.889939)"
}
--------------------------------------------------
// CONSOLE

上面的 `linestring` 将从白宫开始直线到美国国会大厦。


[float]
===== http://www.geojson.org/geojson-spec.html#id4[Polygon]

多边形（Polygon）由点列表定义。每个（外部）列表中的第一个和最后一个点必须相同（必须关闭多边形）。以下是 GeoJSON 中的多边形示例。

[source,js]
--------------------------------------------------
POST /example/doc
{
    "location" : {
        "type" : "polygon",
        "coordinates" : [
            [ [100.0, 0.0], [101.0, 0.0], [101.0, 1.0], [100.0, 1.0], [100.0, 0.0] ]
        ]
    }
}
--------------------------------------------------
// CONSOLE

以下是 WKT 中多边形的示例：

[source,js]
--------------------------------------------------
POST /example/doc
{
    "location" : "POLYGON ((100.0 0.0, 101.0 0.0, 101.0 1.0, 100.0 1.0, 100.0 0.0))"
}
--------------------------------------------------
// CONSOLE

第一个数组表示多边形的外边界，其他数组表示内部形状（“孔（holes）”）。以下是 GeoJSON 中带孔（holes）的多边形的示例：

[source,js]
--------------------------------------------------
POST /example/doc
{
    "location" : {
        "type" : "polygon",
        "coordinates" : [
            [ [100.0, 0.0], [101.0, 0.0], [101.0, 1.0], [100.0, 1.0], [100.0, 0.0] ],
            [ [100.2, 0.2], [100.8, 0.2], [100.8, 0.8], [100.2, 0.8], [100.2, 0.2] ]
        ]
    }
}
--------------------------------------------------
// CONSOLE

以下是 WKT 带孔的多边形的示例：

[source,js]
--------------------------------------------------
POST /example/doc
{
    "location" : "POLYGON ((100.0 0.0, 101.0 0.0, 101.0 1.0, 100.0 1.0, 100.0 0.0), (100.2 0.2, 100.8 0.2, 100.8 0.8, 100.2 0.8, 100.2 0.2))"
}
--------------------------------------------------
// CONSOLE

*重要提示：* WKT 不强制执行顶点的特定顺序，因此日期线和极点周围的模糊多边形是可能的。
https://tools.ietf.org/html/rfc7946#section-3.1.6[GeoJSON] 要求外部多边形必须是逆时针方向，内部形状必须是顺时针方向，
这与顶点排序的 Open Geospatial Consortium（OGC）http://www.opengeospatial.org/standards/sfa[简单特征访问（Simple Feature Access）]规范一致。

Elasticsearch 接受顺时针和逆时针多边形，如果它们看起来不穿过日期线（即它们交叉的经度小于180°），
但是对于穿过日期线的多边形（或者对于宽度超过 180° 的其他多边形），Elasticsearch 需要顶点排序 遵守 OGC 和 GeoJSON 规范。
否则，可能会创建一个非预期的多边形，并返回意想不到的查询/过滤结果。

以下提供了模糊多边形的示例。Elasticsearch 将应用GeoJSON标准来消除歧义，从而导致多边形跨越日期线。

[source,js]
--------------------------------------------------
POST /example/doc
{
    "location" : {
        "type" : "polygon",
        "coordinates" : [
            [ [-177.0, 10.0], [176.0, 15.0], [172.0, 0.0], [176.0, -15.0], [-177.0, -10.0], [-177.0, 10.0] ],
            [ [178.2, 8.2], [-178.8, 8.2], [-180.8, -8.8], [178.2, 8.8] ]
        ]
    }
}
--------------------------------------------------
// CONSOLE
// TEST[catch:/mapper_parsing_exception/]

An `orientation` parameter can be defined when setting the geo_shape mapping (see <<geo-shape-mapping-options>>). This will define vertex
order for the coordinate list on the mapped geo_shape field. It can also be overridden on each document.  The following is an example for
overriding the orientation on a document:

设置 geo_shape 映射时可以定义 `orientation` 参数（请参阅 <<geo-shape-mapping-options>> ）。
这将定义映射的 `geo_shape` 字段上坐标列表的顶点顺序。它也可以在每个文档上覆盖。以下是覆盖文档方向的示例：

[source,js]
--------------------------------------------------
POST /example/doc
{
    "location" : {
        "type" : "polygon",
        "orientation" : "clockwise",
        "coordinates" : [
            [ [100.0, 0.0], [100.0, 1.0], [101.0, 1.0], [101.0, 0.0], [100.0, 0.0] ]
        ]
    }
}
--------------------------------------------------
// CONSOLE

[float]
===== http://www.geojson.org/geojson-spec.html#id5[MultiPoint]

以下是 geojson 点列表的示例：

[source,js]
--------------------------------------------------
POST /example/doc
{
    "location" : {
        "type" : "multipoint",
        "coordinates" : [
            [102.0, 2.0], [103.0, 2.0]
        ]
    }
}
--------------------------------------------------
// CONSOLE

以下是 WKT 点列表的示例：

[source,js]
--------------------------------------------------
POST /example/doc
{
    "location" : "MULTIPOINT (102.0 2.0, 103.0 2.0)"
}
--------------------------------------------------
// CONSOLE

[float]
===== http://www.geojson.org/geojson-spec.html#id6[MultiLineString]

以下是 geojson 线串列表的示例：

[source,js]
--------------------------------------------------
POST /example/doc
{
    "location" : {
        "type" : "multilinestring",
        "coordinates" : [
            [ [102.0, 2.0], [103.0, 2.0], [103.0, 3.0], [102.0, 3.0] ],
            [ [100.0, 0.0], [101.0, 0.0], [101.0, 1.0], [100.0, 1.0] ],
            [ [100.2, 0.2], [100.8, 0.2], [100.8, 0.8], [100.2, 0.8] ]
        ]
    }
}
--------------------------------------------------
// CONSOLE

以下是 WKT 线串列表的示例：

[source,js]
--------------------------------------------------
POST /example/doc
{
    "location" : "MULTILINESTRING ((102.0 2.0, 103.0 2.0, 103.0 3.0, 102.0 3.0), (100.0 0.0, 101.0 0.0, 101.0 1.0, 100.0 1.0), (100.2 0.2, 100.8 0.2, 100.8 0.8, 100.2 0.8))"
}
--------------------------------------------------
// CONSOLE

[float]
===== http://www.geojson.org/geojson-spec.html#id7[MultiPolygon]

以下是 geojson 多边形列表的示例（第二个多边形包含一个孔）：

[source,js]
--------------------------------------------------
POST /example/doc
{
    "location" : {
        "type" : "multipolygon",
        "coordinates" : [
            [ [[102.0, 2.0], [103.0, 2.0], [103.0, 3.0], [102.0, 3.0], [102.0, 2.0]] ],
            [ [[100.0, 0.0], [101.0, 0.0], [101.0, 1.0], [100.0, 1.0], [100.0, 0.0]],
              [[100.2, 0.2], [100.8, 0.2], [100.8, 0.8], [100.2, 0.8], [100.2, 0.2]] ]
        ]
    }
}
--------------------------------------------------
// CONSOLE

以下是 WKT 多边形列表的示例（第二个多边形包含一个孔）：

[source,js]
--------------------------------------------------
POST /example/doc
{
    "location" : "MULTIPOLYGON (((102.0 2.0, 103.0 2.0, 103.0 3.0, 102.0 3.0, 102.0 2.0)), ((100.0 0.0, 101.0 0.0, 101.0 1.0, 100.0 1.0, 100.0 0.0), (100.2 0.2, 100.8 0.2, 100.8 0.8, 100.2 0.8, 100.2 0.2)))"
}
--------------------------------------------------
// CONSOLE

[float]
===== http://geojson.org/geojson-spec.html#geometrycollection[Geometry Collection]

以下是 geojson 几何对象集合的示例：

[source,js]
--------------------------------------------------
POST /example/doc
{
    "location" : {
        "type": "geometrycollection",
        "geometries": [
            {
                "type": "point",
                "coordinates": [100.0, 0.0]
            },
            {
                "type": "linestring",
                "coordinates": [ [101.0, 0.0], [102.0, 1.0] ]
            }
        ]
    }
}
--------------------------------------------------
// CONSOLE

以下是 WKT 几何对象集合的示例：

[source,js]
--------------------------------------------------
POST /example/doc
{
    "location" : "GEOMETRYCOLLECTION (POINT (100.0 0.0), LINESTRING (101.0 0.0, 102.0 1.0))"
}
--------------------------------------------------
// CONSOLE


[float]
===== Envelope


Elasticsearch 支持 `envelope` 类型，它包含形状左上角和右下角的坐标，以 [[minLon，maxLat]，[maxLon，minLat]] 格式表示边界矩形：

[source,js]
--------------------------------------------------
POST /example/doc
{
    "location" : {
        "type" : "envelope",
        "coordinates" : [ [100.0, 1.0], [101.0, 0.0] ]
    }
}
--------------------------------------------------
// CONSOLE

以下是使用 WKT BBOX 格式的 Envelope 示例：

*注意：* WKT 规范需要以下顺序：minLon，maxLon，maxLat，minLat。

[source,js]
--------------------------------------------------
POST /example/doc
{
    "location" : "BBOX (100.0, 102.0, 2.0, 0.0)"
}
--------------------------------------------------
// CONSOLE

[float]
===== Circle

Elasticsearch支持 `circle` 类型，它包含一个半径为的中心点：

[source,js]
--------------------------------------------------
POST /example/doc
{
    "location" : {
        "type" : "circle",
        "coordinates" : [101.0, 1.0],
        "radius" : "100m"
    }
}
--------------------------------------------------
// CONSOLE

注意：内部 `radius` 字段是必需的。 如果没有指定，那么 `radius` 的单位默认为 `METERS`。

*注意:* GeoJSON 或 WKT 都不支持点半径圆类型。

[float]
==== 排序和检索索引形状

由于形状的复杂输入结构和索引表示，目前无法对形状进行排序或直接检索其字段。geo_shape 值只能通过 `_source` 字段检索。
