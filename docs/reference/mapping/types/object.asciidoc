[[object]]
=== 对象数据类型

JSON 文档本质上是分层的：文档可能包含内部对象，而内部对象本身可能包含内部对象：

[source,js]
--------------------------------------------------
PUT my_index/_doc/1
{ <1>
  "region": "US",
  "manager": { <2>
    "age":     30,
    "name": { <3>
      "first": "John",
      "last":  "Smith"
    }
  }
}
--------------------------------------------------
// CONSOLE
<1> 外部文档也是一个 JSON 对象。
<2> 它包含了一个叫 `manager` 的内部对象。
<3> 又包含了一个叫 `name` 的内部对象。

在内部，这个文档被索引为一个简单的，平铺的键值对列表：

[source,js]
--------------------------------------------------
{
  "region":             "US",
  "manager.age":        30,
  "manager.name.first": "John",
  "manager.name.last":  "Smith"
}
--------------------------------------------------
// NOTCONSOLE

上述文档的显式映射可能如下所示：

[source,js]
--------------------------------------------------
PUT my_index
{
  "mappings": {
    "_doc": { <1>
      "properties": {
        "region": {
          "type": "keyword"
        },
        "manager": { <2>
          "properties": {
            "age":  { "type": "integer" },
            "name": { <3>
              "properties": {
                "first": { "type": "text" },
                "last":  { "type": "text" }
              }
            }
          }
        }
      }
    }
  }
}
--------------------------------------------------
// CONSOLE
<1> 映射类型是一种对象，拥有 `properties` 字段。
<2> `manager` 字段是一个内部对象字段。
<3> `manager.name` 字段是 `manager` 内的一个内部对象字段。

你不需要显式地设置 `type` 字段为 `object` ，因为这是默认值。

[[object-params]]
==== `object` 字段的参数

`object` 字段接受下面的参数：

[horizontal]
<<dynamic,`dynamic`>>::

    新 `properties` 是否应该被动态添加到已存在的嵌套对象中。接受 `true` （默认）， `false` 和 `strict` 。


<<enabled,`enabled`>>::

    为对象字段指定的 JSON 值是否应该被解析和索引（默认 `true` ）或完全忽略（ `false` ）。

<<properties,`properties`>>::

    嵌套对象内部的字段，可以是 任意的 <<mapping-types,数据类型>>，包括 `nested` 。
    新 `properties` 可以被添加到已存在的嵌套对象。

IMPORTANT: 如果你需要索引对象数组而不是单个对象，请先阅读 <<nested>> 。
