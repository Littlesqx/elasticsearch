[[text]]
=== 文本数据类型

用于索引全文的字段，例如电子邮件正文或产品说明。这些字段是被分析（ `analyzed` ）的，即它们通过<<analysis, 分析器>>，
在被索引之前将字符串转换为独立的词项（term）列表。分析过程允许 Elasticsearch 搜索每个全文文本字段 _中_ 的单个单词。文本字段不用于排序，很少用于聚合（尽管<<search-aggregations-bucket-significanttext-aggregation,重要文本聚合>>是一个值得注意的例外）。


你如果需要索引结构化内容（如电子邮件地址，主机名，状态代码或标签），则可能应该使用 <<keyword,`keyword`>> 字段。

下面是文本字段的映射示例：

[source,js]
--------------------------------
PUT my_index
{
  "mappings": {
    "_doc": {
      "properties": {
        "full_name": {
          "type":  "text"
        }
      }
    }
  }
}
--------------------------------
// CONSOLE

有时候，同时具有全文（ `text` ）和关键字（ `keyword` ）版本是有帮助的：一个用于全文本搜索，另一个用于聚合和排序。这可以通过<<multi-fields,多字段>>实现。

[[text-params]]
==== 文本字段的参数

文本字段接受以下参数：

[horizontal]

<<analyzer,`analyzer`>>::

    <<mapping-index,分析>>字符串字段时应该使用的<<analysis,分析器>>，无论是在索引时间还是搜索时间（除非被 <<search-analyzer,`search_analyzer`>> 覆盖）。默认为默认索引分析器或 <<analysis-standard-analyzer,`standard` 分析器>>。

<<mapping-boost,`boost`>>::

    映射字段级查询时间提升。接受一个浮点数，默认为 `1.0` 。

<<eager-global-ordinals,`eager_global_ordinals`>>::

    是否应该全新加载全局序号？ `true` 或 `false` （默认）。 对于经常用于（重要）词项聚合（terms aggregations）的字段，启用此功能是一个好主意。

<<fielddata,`fielddata`>>::

    是否可以使用内存中的字段数据进行排序，聚合或脚本编写？ `true` 或 `false` （默认）。

<<field-data-filtering,`fielddata_frequency_filter`>>::

    此为高级设置，允许在 `fielddata` 启用时决定哪些值加载到内存中。默认情况下，所有值都被加载。


<<multi-fields,`fields`>>::

    多字段允许以多种方式将相同的字符串值索引到不同的目的，例如用于搜索的一个字段和用于排序和聚合的多字段，或由不同分析器分析的相同字符串值。

<<mapping-index,`index`>>::

    字段是否可搜索？接受 `true` （默认）或 `false` 。

<<index-options,`index_options`>>::

    索引中应存储哪些信息，以便搜索和高亮显示。默认为 `positions` 。

<<index-prefix-config,`index_prefixes`>>::

    如果启用，则将 2 到 5 个字符之间的词项（term）前缀索引到单独的字段中。
    这允许前缀搜索更有效地运行，但代价是更大的索引。接受 <<index-prefix-config,`index-prefix configuration block`>> 。

`index_phrases`::

    如果启用，则将两个单词组合（ 'shingles' ）索引到单独的字段中。这允许精确短语查询更有效地运行，但代价是更大的索引。
    请注意，当删除停用词（stopwords）时，这种方法效果最佳，因为包含停用词（stopwords）的短语不会使用辅助字段，而是会回退到标准短语查询。
    接受 `true` 或 `false` （默认）。

<<norms,`norms`>>::

    在评分查询时是否应考虑字段长度。 接受 `true` （默认）或 `false` 。


<<position-increment-gap,`position_increment_gap`>>::

    应该在字符串数组的每个元素之间插入的假词项位置（fake term position）的数量。默认为在分析器上配置的 `position_increment_gap` ，默认为 `100` 。`100` 被选中，
    因为它阻止了匹配词项（term）与字段值之间的合理大小的间隔（小于 `100` ）的短语查询。

<<mapping-store,`store`>>::

    字段值是否应与 <<mapping-source-field,`_source`>> 字段分开存储和检索。接受 `true` 或 `false` （默认）。


<<search-analyzer,`search_analyzer`>>::

    搜索时在分析中应该使用的<<analyzer,分析器>>。默认为 `analyzer` 设置。

<<search-quote-analyzer,`search_quote_analyzer`>>::

    搜索时遇到短语应该使用的<<analyzer,分析器>>。默认为 `search_analyzer` 设置。

<<similarity,`similarity`>>::

    应该使用哪种评分算法或 _相似度_ 。默认为 `BM25` 。

<<term-vector,`term_vector`>>::

    是否应为<<mapping-index,分析>>字段存储词向量（term vector）。默认为 `no` 。

[[index-prefix-config]]
==== 索引前缀配置

文本字段还可以索引词项前缀以加速前缀搜索。`index_prefixes` 参数配置如下。
可以不包括 `min_chars` 和 `max_chars` 中的任何一个或两个。这两个值都被视为可以包括的。

[source,js]
--------------------------------
PUT my_index
{
  "mappings": {
    "_doc": {
      "properties": {
        "full_name": {
          "type":  "text",
          "index_prefixes" : {
            "min_chars" : 1,    <1>
            "max_chars" : 10    <2>
          }
        }
      }
    }
  }
}
--------------------------------
// CONSOLE
<1> `min_chars` 必须大于零，默认为 2。
<2> `max_chars` 必须大于或等于 `min_chars` ，并且小于 20，默认是 5。