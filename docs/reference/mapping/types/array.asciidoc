[[array]]
=== 数组数据类型

在 Elasticsearch，没有专门的数组类型。任何字段默认都可以包含零个或更多个值，
但是，一个数据中的所有值必须是相同的数据类型。例如：

* 字符串数组： [ `"one"`, `"two"` ]
* 整型数组： [ `1`, `2` ]
* 数组的数组： [ `1`, [ `2`, `3` ]] ，也相当于 [ `1`, `2`, `3` ]
* 对象数组： [ `{ "name": "Mary", "age": 12 }`, `{ "name": "John", "age": 10 }`]

.对象数组
[NOTE]
====================================================

对象数组并不会如你期望地工作：你不能独立于数组中的其他对象查询每个对象。你如果需要做到，
那应该使用 <<nested,`nested`>> 数据类型而不是 <<object,`object`>> 数据类型。

<<nested>> 中阐述了更多细节。
====================================================

动态添加字段时，数组中的第一个值确定字段 `type` 。
所有后续值必须具有相同的数据类型或必须具有相同的数据类型
所有后续值必须具有相同的数据类型，或者至少必须能够将后续值 <<coerce,coerce>> 为相同的数据类型。

混合数据类型的数组 _不_ 受支持： [ `10`, `"some string"` ]

数组可能包含 `null` 值，它们由配置的 <<null-value,`null_value`>> 替换或完全跳过。
空数组 `[]` 被视为缺失字段 -- 没有值的字段。

没有任何东西需要预先配置才能在文档中使用数组，它们是开箱即用的：


[source,js]
--------------------------------------------------
PUT my_index/_doc/1
{
  "message": "some arrays in this document...",
  "tags":  [ "elasticsearch", "wow" ], <1>
  "lists": [ <2>
    {
      "name": "prog_list",
      "description": "programming list"
    },
    {
      "name": "cool_list",
      "description": "cool stuff list"
    }
  ]
}

PUT my_index/_doc/2 <3>
{
  "message": "no arrays in this document...",
  "tags":  "elasticsearch",
  "lists": {
    "name": "prog_list",
    "description": "programming list"
  }
}

GET my_index/_search
{
  "query": {
    "match": {
      "tags": "elasticsearch" <4>
    }
  }5
}
--------------------------------------------------
// CONSOLE
<1> `tags` 字段被自动地作为 `string` 类型字段添加。
<2> `lists` 字段被自动地作为 `object` 类型字段添加。
<3> 第二个文档没有不含数组，但是也可以索引到相同的字段。
<4> 这个查询在 `tag` 字段查找 `elasticsearch` ， 并且匹配到两个文档。

.多值字段和倒排索引
****************************************************
所有字段类型都支持开箱即用的多值字段，这是源于 Lucene。Lucene 被设计为一个全文搜索引擎。
为了在海量文本中搜索特定词语，Lucene 将文本标记为特定的词项（term），并将每一个词项（term）分别添加到倒排索引中。

这意味着即使是一个简单的文本也必须默认支持多值。当其它数据类型如数字或者日期被添加时，
他们使用和字符串一样的数据结构，因此自然变为多值。

****************************************************

