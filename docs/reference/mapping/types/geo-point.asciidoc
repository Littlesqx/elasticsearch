[[geo-point]]
=== 地理位置类型

地理位置（ `geo_point` ）类型接受经纬度对，可以被用作：

* 找到在<<query-dsl-geo-bounding-box-query,边界框>>内，
  离一个中心点的确切 <<query-dsl-geo-distance-query,距离>>，
  或一个<<query-dsl-geo-polygon-query,多边形>>中的地理位置点。
* 通过<<search-aggregations-bucket-geohashgrid-aggregation,地理位置>>或离中心点的<<search-aggregations-bucket-geodistance-aggregation,距离>>聚合文档。
* 将距离整合为文档的<<query-dsl-function-score-query,相关度分数>>。
* 通过距离<<geo-sorting,排序>>文档。

有如下的四种方法指定地理位置：

[source,js]
--------------------------------------------------
PUT my_index
{
  "mappings": {
    "_doc": {
      "properties": {
        "location": {
          "type": "geo_point"
        }
      }
    }
  }
}

PUT my_index/_doc/1
{
  "text": "Geo-point as an object",
  "location": { <1>
    "lat": 41.12,
    "lon": -71.34
  }
}

PUT my_index/_doc/2
{
  "text": "Geo-point as a string",
  "location": "41.12,-71.34" <2>
}

PUT my_index/_doc/3
{
  "text": "Geo-point as a geohash",
  "location": "drm3btev3e86" <3>
}

PUT my_index/_doc/4
{
  "text": "Geo-point as an array",
  "location": [ -71.34, 41.12 ] <4>
}

GET my_index/_search
{
  "query": {
    "geo_bounding_box": { <5>
      "location": {
        "top_left": {
          "lat": 42,
          "lon": -72
        },
        "bottom_right": {
          "lat": 40,
          "lon": -74
        }
      }
    }
  }
}
--------------------------------------------------
// CONSOLE
<1> Geo-point 可以用具有 `lat` 和 `lon` 属性的对象表示。
<2> Geo-point 可以用以 `"lat,lon"` 作为格式的字符串表示。
<3> Geo-point 可以用 geohash 表示。
<4> Geo-point 可以用以 [ `lon`, `lat`] 为格式的数组表示。
<5> 查询边界框（query.geo_bounding_box）可以找出边界框里的所有地理位置。

[IMPORTANT]
.Geo-points 表示为字符串或数组
==================================================

请注意字符串的表示方式被定义为 `lat,lon` ，而数组的表示方式是相反的，即 `lon,lat` 。

本来字符和数组形式都是使用 `lat,lon` ，但是数组形式早些版本被改变了，以符合 GeoJSON 使用的格式。

==================================================

[NOTE]

一个点可以表示为 http://en.wikipedia.org/wiki/Geohash[geohash]。
Geohashes 是 https://en.wikipedia.org/wiki/Base32[base32] 编码的纬度和经度位交错的字符串。
geohash 中的每个字符都会为精度添加额外的 5 位。
因此哈希越长，它就越精确。为了索引目的，地理相位被转换为纬度-经度对。
在此过程中，仅使用前 12 个字符，因此在 geohash 中指定超过 12 个字符不会增加精度。
12 个字符提供 60 位，这应该将可能的错误减少到小于 2cm。

[[geo-point-params]]
==== `geo_point` 字段的参数

`geo_point` 字段接受以下参数：

[horizontal]

<<ignore-malformed,`ignore_malformed`>>::

    如果为 `true` ，格式错误的 geo-points 会被忽略。如果为 `false` （默认），
    格式错误的 geo_points 会抛出异常，并拒绝整个文档。

`ignore_z_value`::

    如果为 `true` （默认），将接受三个维度点（存储在源中），但只会索引纬度和经度值；第三个维度会被忽略。
    如果为 `false` ，则包含任何超过纬度和经度（二维）值的地理点（geo-points）会抛出异常并拒绝整个文档。

<<null-value,`null_value`>>::

    接受一个 geopoint 值替换显式 `null` 值。默认是 `null` ，意味着该字段被视为缺失。

==== 在脚本中使用 geo-points

在脚本中，当访问的 geo-point 的值时，将返回一个 `GeoPoint` 对象，它允许分别访问 `.lat` 和 `.lon` ：

[source,painless]
--------------------------------------------------
def geopoint = doc['location'].value;
def lat      = geopoint.lat;
def lon      = geopoint.lon;
--------------------------------------------------

由于性能的原因，最好直接访问 lat/lon：

[source,painless]
--------------------------------------------------
def lat      = doc['location'].lat;
def lon      = doc['location'].lon;
--------------------------------------------------
