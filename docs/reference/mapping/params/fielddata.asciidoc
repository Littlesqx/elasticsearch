[[fielddata]]
=== `fielddata`

大多数字段默认被<<mapping-index,索引>>，这使得它们可以被搜索。但是，对脚本中的字段值进行排序、聚合和访问需要使用不同的搜索访问模式。

搜索需要回答问题__“哪个文档包含这个词条？”__，而排序和聚合需要回答一个不同的问题：__“**这个**文档的这个字段的值是多少？”__。

对于该数据访问模式，大多数字段可以使用 index-time，磁盘上的 <<doc-values，`doc_values`>> ，但 <<text,`text`>> 字段不支持 `doc_values` 。

相反， `text` 字段使用名为 `fielddata` 的 query-time **内存上**的数据结构。第一次将字段用于聚合、排序或或在脚本，此数据结构是根据需要构建的。
它是通过从磁盘读取每个段（segment）的整个反向索引，反转术语↔︎文档关系，并将结果存储在内存中的 JVM 堆中构建的。

==== 默认情况下，在 `text` 字段上禁用 Fielddata

Fielddata 可以占用**很多**堆空间，特别是在加载高基数 `text` 字段时。一旦 fielddata 已加载到堆中，它将在该段的生命周期内保留。
此外，加载 fielddata 是一个昂贵的过程，可能会导致用户遇到延迟命中。这就是默认情况下禁用 fielddata 的原因。

如果你尝试从 `text` 字段上的脚本中排序、聚合或访问值，你将看到以下异常：

[quote]
--
默认情况下，在 `text` 字段上禁用 Fielddata。在 [`your_field_name`] 上设置 `fielddata = true` ，以便通过反转索引来加载内存中的 fielddata。请注意，这可能会占用大量内存。
--

[[before-enabling-fielddata]]
==== 启用 fielddata 之前

在启用 fielddata 之前，请考虑使用 `text` 字段进行聚合，排序或在脚本的原因。这样做通常没有意义。

在索引之前分析文本字段，以便通过搜索 `new` 或 `york` 找到类似 `New York` 的值。当你可能想要一个名为 `New York` 的桶（bucket）时，这个字段上的 `terms` 聚合将返回一个 `new` 桶（bucket）和一个 `york` 桶（bucket）。

相反，你应该有一个用于全文搜索的 `text` 字段，以及一个未分析的 <<keyword,`keyword`>> 字段，其中包含启用聚合的 <<doc-values,`doc_values`>> ，如下所示：

[source,js]
---------------------------------
PUT my_index
{
  "mappings": {
    "_doc": {
      "properties": {
        "my_field": { <1>
          "type": "text",
          "fields": {
            "keyword": { <2>
              "type": "keyword"
            }
          }
        }
      }
    }
  }
}
---------------------------------
// CONSOLE
<1> 使用 `my_field` 字段用于搜索。
<2> 使用 `my_field.keyword` 字段用户聚合、排序或在脚本中。

==== 在 `text` 字段中启用 fielddata。

你可以使用 <<indices-put-mapping,PUT mapping API>> 在现有 `text` 字段上启用 fielddata，如下所示：

[source,js]
-----------------------------------
PUT my_index/_mapping/_doc
{
  "properties": {
    "my_field": { <1>
      "type":     "text",
      "fielddata": true
    }
  }
}
-----------------------------------
// CONSOLE
// TEST[continued]

<1> 为 `my_field` 指定的映射应该包含该字段的现有映射以及 `fielddata` 参数。

[[field-data-filtering]]
==== `fielddata_frequency_filter`

Fielddata 过滤可用于减少加载到内存中的词项（term）数量，从而减少内存使用量。词项（term）可以通过 _frequency_ 过滤：

频率过滤器允许你仅加载文档频率介于 `min` 和 `max` 值之间的词项（term），该值可以表示为绝对数字（当数字大于 1.0 时）或百分比（例如 `0.01` 是 `1％` 和 `1.0` 是 `100％` ）。
频率按 **每个段（per segment）** 计算。百分比基于具有该字段值的文档数，而不是该段（segment）中的所有文档。

通过使用 `min_segment_size` 指定段（segment）应包含的最小文档数，可以完全排除小段：

[source,js]
--------------------------------------------------
PUT my_index
{
  "mappings": {
    "_doc": {
      "properties": {
        "tag": {
          "type": "text",
          "fielddata": true,
          "fielddata_frequency_filter": {
            "min": 0.001,
            "max": 0.1,
            "min_segment_size": 500
          }
        }
      }
    }
  }
}
--------------------------------------------------
// CONSOLE
