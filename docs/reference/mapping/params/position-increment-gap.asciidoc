[[position-increment-gap]] 
=== `position_increment_gap`

<<mapping-index,Analyzed>> 文本字段将词项（token） <<index-options,positions>> 考虑在内，以便能够支持 <<query-dsl-match-query-phrase,proximity或phrase 查询>>。

使用多个值索引文本字段时，会在值之间添加 `假` 间隙（"fake" gap），以防止大多数短语查询在值之间进行匹配。可使用 `position_increment_gap` 配置此间隙的大小，默认为 `100` 。

例如：

[source,js]
--------------------------------------------------
PUT my_index/_doc/1
{
    "names": [ "John Abraham", "Lincoln Smith"]
}

GET my_index/_search
{
    "query": {
        "match_phrase": {
            "names": {
                "query": "Abraham Lincoln" <1>
            }
        }
    }
}

GET my_index/_search
{
    "query": {
        "match_phrase": {
            "names": {
                "query": "Abraham Lincoln",
                "slop": 101 <2>
            }
        }
    }
}
--------------------------------------------------
// CONSOLE
<1> 此短语查询与预期的文档不匹配。
<2> 即使 `Abraham` 和 `Lincoln` 在分开的字符串中，由于 `slop` > `position_increment_gap` ，此短语查询匹配了文档。


可以在映射中指定 `position_increment_gap` 。 例如：

[source,js]
--------------------------------------------------
PUT my_index
{
  "mappings": {
    "_doc": {
      "properties": {
        "names": {
          "type": "text",
          "position_increment_gap": 0 <1>
        }
      }
    }
  }
}

PUT my_index/_doc/1
{
    "names": [ "John Abraham", "Lincoln Smith"]
}

GET my_index/_search
{
    "query": {
        "match_phrase": {
            "names": "Abraham Lincoln" <2>
        }
    }
}
--------------------------------------------------
// CONSOLE
<1> 下一个数组元素中的第一项将是前一个数组元素中最后一项的 0 项。
<2> 奇怪的是短语查询匹配了文档，但它是在映射中要求的。

