[[normalizer]]
=== `normalizer`

<<keyword,`keyword`>> 字段的 `normalizer` 属性除了会保证在分析链产生单个令牌之外，类似于 <<analyzer,`analyzer`>> 。

`normalizer` 在以下场景被应用：在索引关键字之前，以及在通过查询解析器（例如 <<query-dsl-match-query,`match`>> 查询）或者通过词项级（term level）查询（例如 <<query-dsl-term-query,`term`>> 查询）搜索 `keyword` 字段时的搜索时间。

[source,js]
--------------------------------
PUT index
{
  "settings": {
    "analysis": {
      "normalizer": {
        "my_normalizer": {
          "type": "custom",
          "char_filter": [],
          "filter": ["lowercase", "asciifolding"]
        }
      }
    }
  },
  "mappings": {
    "_doc": {
      "properties": {
        "foo": {
          "type": "keyword",
          "normalizer": "my_normalizer"
        }
      }
    }
  }
}

PUT index/_doc/1
{
  "foo": "BÀR"
}

PUT index/_doc/2
{
  "foo": "bar"
}

PUT index/_doc/3
{
  "foo": "baz"
}

POST index/_refresh

GET index/_search
{
  "query": {
    "term": {
      "foo": "BAR"
    }
  }
}

GET index/_search
{
  "query": {
    "match": {
      "foo": "BAR"
    }
  }
}
--------------------------------
// CONSOLE

上述查询与文档 1 和文档 2 匹配，因为 `BÀR` 在索引和查询时都转换为 `bar` 。

[source,js]
----------------------------
{
  "took": $body.took,
  "timed_out": false,
  "_shards": {
    "total": 5,
    "successful": 5,
    "skipped" : 0,
    "failed": 0
  },
  "hits": {
    "total": 2,
    "max_score": 0.2876821,
    "hits": [
      {
        "_index": "index",
        "_type": "_doc",
        "_id": "2",
        "_score": 0.2876821,
        "_source": {
          "foo": "bar"
        }
      },
      {
        "_index": "index",
        "_type": "_doc",
        "_id": "1",
        "_score": 0.2876821,
        "_source": {
          "foo": "BÀR"
        }
      }
    ]
  }
}
----------------------------
// TESTRESPONSE[s/"took".*/"took": "$body.took",/]


此外，关键字在索引之前转换的事实也意味着聚合返回标准化后（normalized）的值：

[source,js]
----------------------------
GET index/_search
{
  "size": 0,
  "aggs": {
    "foo_terms": {
      "terms": {
        "field": "foo"
      }
    }
  }
}
----------------------------
// CONSOLE
// TEST[continued]

returns

[source,js]
----------------------------
{
  "took": 43,
  "timed_out": false,
  "_shards": {
    "total": 5,
    "successful": 5,
    "skipped" : 0,
    "failed": 0
  },
  "hits": {
    "total": 3,
    "max_score": 0.0,
    "hits": []
  },
  "aggregations": {
    "foo_terms": {
      "doc_count_error_upper_bound": 0,
      "sum_other_doc_count": 0,
      "buckets": [
        {
          "key": "bar",
          "doc_count": 2
        },
        {
          "key": "baz",
          "doc_count": 1
        }
      ]
    }
  }
}
----------------------------
// TESTRESPONSE[s/"took".*/"took": "$body.took",/]
